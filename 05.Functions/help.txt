*****************************************************************************************************************
---------------------------------------------//FUNCTIONS\\-------------------------------------------------------
_________________________________________________________________________________________________________________

#It is a peice of program code which performs specific task for given parameters and returns results
#can take more then one or 0 input parameters
#returns single value 
#naming same as variables 
    !it's code is stored in code section
    !the variables are created in stack and deleted asap after the return;
            Example:-
                void printfun(){
                    cout<<"hello world";
                }
                int main(){
                    printfun();                
                }
////////////////////////////////////////////[OVERLOADING]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        @@two functions cam have same name but there parameters should be different 
        @@Two functions with same name and parameters are same even if there return type is different
///////////////////////////////////////////// TEMPLATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        @@this is used to simplify our work
        if there is two same parameter entry we can use it 
                                template<class T>
                                //write a Max() function template for 2 numbers
                                T Max(T x, T y){
                                    if (x>y){
                                        return x;
                                    }else {
                                    return y;

                                    }
                                }

                                void Main()
                                {
                                    cout<<Max(10,5)<<endl;
                                    cout<<Max(12.5f,17.3f);
                                }
//////////////////////////////////////////////[default functions]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
^^ we can combine more than two overloaded functions in one..
    just by declaring variables to a default value
            int add_fun(int x=0, int y=0, int z=0){
                return x+y+z;
            }
            int main(){
                cout<<add_fun(2,3,4)<<endl;
                cout<<add_fun(2,3)<<endl;
                cout<<add_fun(2)<<endl;
                cout<<add_fun()<<endl;
            }
//////////////////////////////////////////////[parameter PASSING]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    ^^There are 3 types by which we can pass the parameter in the FUNCTIONS
            1)pass by value
                            :-here we give specific value to the parameters
                                    int fun(int a, int b){//code}
                                    int main(){
                                    cout<<fun(x,y);}
                                     the values of action parameters are just copied from the action parameter
                                     it does not effect the value of action parameter only will change formal
                                     parameter.
            2)pass by address
                            :-here we give address of the action parameter and store in it pointers
                                    int fun(int *a, int *b){//code}
                                    int main(){
                                    cout<<fun(&x,&y);}
                                     the address of action parameter is stored in the formal parameter initialised
                                     as pointers
                                     and is printed using derefrencing formal parameter
            3)pass by refrence 
                            :-here we make function parameters the refrence of the action parameter
                                    int fun(int &a,int &b){//code}
                                    int main(){
                                    cout<<fun(x,y);}
                                     the action parameters and formal parameters are the same with just two different
                                     name--- here no new loaction is assigned 
                                     function is written in main function while call
//////////////////////////////////////////////[return by address]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
^^this tells us that a function can also return address to a pointer only if stored inn heap memory 
 